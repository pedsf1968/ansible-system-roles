# OpenSSL root CA configuration file.
# Copy to `/root/ca/openssl.cnf`.

[ ca ]
# `man ca`
default_ca = CA_default

[ CA_default ]
# Directory and file locations.
dir               = "{{ certificate_directory }}"
certs             = "{{ certificate_certs_directory }}"
crl_dir           = "{{ certificate_crl_directory }}"
new_certs_dir     = "{{ certificate_newcerts_directory }}"
database          = "{{ certificate_directory }}/index.txt"
serial            = "{{ certificate_directory }}/serial"
RANDFILE          = "{{ certificate_private_directory }}/.rand"

# The root key and root certificate.
private_key       = "{{ certificate_private_directory }}/{{ certificate_ca_name }}.key"
certificate       = "{{ certificate_certs_directory }}/{{ certificate_ca_name }}.crt"

# For certificate revocation lists.
crlnumber         = "{{ certificate_directory }}/crlnumber"
crl               = "{{ certificate_crl_directory }}/{{ certificate_ca_name }}.crl"
crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = sha256

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = policy_strict

[ policy_strict ]
# The root CA should only sign intermediate certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_loose ]
# Allow the intermediate CA to sign a more diverse range of certificates.
# See the POLICY FORMAT section of the `ca` man page.
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req ]
# Options for the `req` tool (`man req`).
default_bits        = 2048
distinguished_name  = req_distinguished_name
string_mask         = utf8only

# SHA-1 is deprecated, so use SHA-2 instead.
default_md          = sha256

# Extension to add when the -x509 option is used.
x509_extensions     = v3_ca

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = "{{ certificate_country }}"
stateOrProvinceName             = "{{ certificate_state }}"
localityName                    = "{{ certificate_locality }}"
0.organizationName              = "{{ certificate_organization_name }}"
organizationalUnitName          = "{{ certificate_organizational_unit }}"
commonName                      = "{{ certificate_ca_common_name }}"
emailAddress                    = "{{ certificate_email_address }}"

# Optionally, specify some defaults.
countryName_default             = "{{ certificate_country }}"
stateOrProvinceName_default     = "{{ certificate_state }}"
localityName_default            = "{{ certificate_locality }}"
0.organizationName_default      = "{{ certificate_organization_name }}"
organizationalUnitName_default  = "{{ certificate_organizational_unit }}"
emailAddress_default            = "{{ certificate_email_address }}"

[ v3_ca ]
# Extensions for a typical CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ v3_intermediate_ca ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ usr_cert ]
# Extensions for client certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = client, email
nsComment = "OpenSSL Generated Client Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, emailProtection

[ server_cert ]
# Extensions for server certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always

[ ocsp ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning